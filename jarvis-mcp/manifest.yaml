apiVersion: v1
kind: Namespace
metadata:
  name: jarvis-mcp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jarvis-mcp-server
  namespace: jarvis-mcp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jarvis-mcp-server
  template:
    metadata:
      labels:
        app: jarvis-mcp-server
    spec:
      serviceAccountName: jarvis-mcp-server-sa
      containers:
        - name: jarvis-mcp-server
          image: ghcr.io/adawolfs/jarvis-mcp:latest
          command: ["uv", "run", "server.py"]
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          env:
            - name: INCLUSTER
              value: "true"

---
apiVersion: v1
kind: Service
metadata:
  name: jarvis-mcp-server
  namespace: jarvis-mcp
spec:
  selector:
    app: jarvis-mcp-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: ClusterIP
---

apiVersion: v1  
kind: ServiceAccount
metadata:
  name: jarvis-mcp-server-sa
  namespace: jarvis-mcp

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jarvis-mcp-server-role
  namespace: default
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "configmaps"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jarvis-mcp-server-rolebinding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: jarvis-mcp-server-sa
    namespace: jarvis-mcp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jarvis-mcp-server-role

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: block-delete-kubernetes-svc
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["DELETE"]
        resources: ["services"]
        scope: "Namespaced"
  validations:
    # En operaciones DELETE, 'oldObject' es el recurso actual.
    - expression: "!(oldObject.metadata.name == 'kubernetes' && oldObject.metadata.namespace == 'default')"
      message: "Eliminar el Service 'kubernetes' en 'default' está prohibido por política."
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: block-delete-kubernetes-svc-binding
spec:
  policyName: block-delete-kubernetes-svc
  validationActions: ["Deny"]
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jarvis-mcp-server-ingress
  namespace: jarvis-mcp
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - jarvis-mcp.adawolfs.com
      secretName: adawolfs-origin-tls
  rules:
    - host: jarvis-mcp.adawolfs.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jarvis-mcp-server
                port:
                  number: 80